package 코드봄_level2;
/**
 한 번에 K칸을 앞으로 점프, or (현재까지 온 거리) x 2 순간이동.
 K칸을 점프하면 K만큼 건전지 사용. 순간이동 -> 건전지 X
 N만큼 떨어진 장소로 가려고 한다.
 건전지 사용량의 최솟값을 구하기.
 처음 위치는 0
 앞으로 점프하거나, * 2 로 순간이동을 하니 뒤로 가는 경우의 수는 없다.
 <문제풀이 흐름>
 최대한 순간이동을 많이 해야하는 문제이다.
 순간이동을 할 때 마다, 건전지 사용량은 들지 않으니, 조건만 맞다면 계속 순간이동 할 수 있다.
 n이 0이 될때까지, 반복해주는데 n이 2로 나눠진다면 n 을 /2 해준다 (순간이동 업데이트)
 나눠지지 않는다면, 한 칸 앞으로 이동해준다 (n - 1)
 **/
public class Level2_점프와순간이동 {
    public int solution(int n) {
        int answer = 0;

        while(n != 0) {
            if(n % 2 == 0) {
                n /= 2;
            } else {
                n--;
                answer++;
            }
        }
        return answer;
    }
}
